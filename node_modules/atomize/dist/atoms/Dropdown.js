"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _theming = require("../core/theming");

var _Div = _interopRequireDefault(require("./Div"));

var _Icon = _interopRequireDefault(require("./Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  > div:last-child {\n    position: absolute;\n    z-index: 10;\n    ", "\n    transition: all 0.2s ease-in-out;\n    opacity: ", ";\n    transform: scaleY(", ");\n  }\n\n  ", "\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var BaseDropdown = (0, _styledComponents["default"])(_Div["default"])(_templateObject(), function (props) {
  return findDropdownDir(props.direction);
}, function (props) {
  return props.isOpen ? "1" : "0";
}, function (props) {
  return props.isOpen ? "1" : "0";
}, function (props) {
  return props.targetHover && ":hover { border-color: ".concat(props.theme.colors[props.focusBorderColor], "}");
}, function (props) {
  return props.targetHover && ":hover > div:last-child{ opacity: 1; transform: scaleY(1);}";
});

var Dropdown =
/*#__PURE__*/
function (_Component) {
  _inherits(Dropdown, _Component);

  function Dropdown(props) {
    var _this;

    _classCallCheck(this, Dropdown);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).call(this, props));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.handleOutsideClick = _this.handleOutsideClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Dropdown, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener("mousedown", this.handleOutsideClick, false);
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      var _this$props = this.props,
          isOpen = _this$props.isOpen,
          onClick = _this$props.onClick;

      if (!isOpen) {
        document.addEventListener("mousedown", this.handleOutsideClick, false);
      } else {
        document.removeEventListener("mousedown", this.handleOutsideClick, false);
      }

      onClick();
    }
  }, {
    key: "handleOutsideClick",
    value: function handleOutsideClick(e) {
      if (_reactDom["default"].findDOMNode(this).contains(e.target)) {
        return;
      }

      this.handleClick();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          menu = _this$props2.menu,
          isOpen = _this$props2.isOpen,
          onClick = _this$props2.onClick,
          targetHover = _this$props2.targetHover,
          prefix = _this$props2.prefix,
          openSuffix = _this$props2.openSuffix,
          closeSuffix = _this$props2.closeSuffix,
          isLoading = _this$props2.isLoading,
          borderColor = _this$props2.borderColor,
          focusBorderColor = _this$props2.focusBorderColor,
          bg = _this$props2.bg,
          focusBg = _this$props2.focusBg,
          rest = _objectWithoutProperties(_this$props2, ["children", "menu", "isOpen", "onClick", "targetHover", "prefix", "openSuffix", "closeSuffix", "isLoading", "borderColor", "focusBorderColor", "bg", "focusBg"]);

      return _react["default"].createElement(BaseDropdown, _extends({
        ref: function ref(node) {
          return _this2.node = node;
        },
        onClick: !isLoading ? targetHover ? null : this.handleClick : function () {},
        targetHover: targetHover,
        pos: "relative",
        isOpen: isOpen,
        borderColor: isOpen ? focusBorderColor : borderColor,
        bg: isOpen ? focusBg : bg
      }, rest), prefix, children, isLoading ? _react["default"].createElement(_Icon["default"], {
        name: "Loading",
        color: "gray600",
        size: "18px"
      }) : isOpen ? openSuffix : closeSuffix, menu);
    }
  }]);

  return Dropdown;
}(_react.Component);

Dropdown.defaultProps = {
  tag: "div",
  d: "flex",
  align: "center",
  textColor: "medium",
  textWeight: "500",
  justify: "space-between",
  p: {
    x: "0.75rem"
  },
  h: "2.5rem",
  textSize: "body",
  rounded: "md",
  border: "1px solid",
  borderColor: "gray500",
  w: "100%",
  bg: "white",
  focusBg: "gray100",
  focusBorderColor: "gray800",
  cursor: "pointer",
  onClick: function onClick() {},
  openSuffix: _react["default"].createElement(_Icon["default"], {
    name: "UpArrow",
    size: "18px",
    m: {
      l: "1rem"
    },
    color: "medium"
  }),
  closeSuffix: _react["default"].createElement(_Icon["default"], {
    name: "DownArrow",
    size: "18px",
    m: {
      l: "1rem"
    },
    color: "medium"
  })
};

var findDropdownDir = function findDropdownDir(e) {
  switch (e) {
    case "topright":
      return "transform-origin: 100% 100%; bottom: calc(100% + 2px); right: 0;";
      break;

    case "topleft":
      return "transform-origin: 0 100%; bottom: calc(100% + 2px); left: 0;";
      break;

    case "bottomright":
      return "transform-origin: 50% 0; top: calc(100% + 2px); right: 0;";
      break;

    case "righttop":
      return "transform-origin: 0 0; top: 0; left: calc(100% + 2px);";
      break;

    case "lefttop":
      return "transform-origin: 0 0; top: 0; right: calc(100% + 2px);";
      break;

    default:
      return "transform-origin: 50% 0; top: calc(100% + 2px); left: 0;";
  }
};

var _default = (0, _theming.withTheme)(Dropdown);

exports["default"] = _default;